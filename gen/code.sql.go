// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: code.sql

package sqlc

import (
	"context"
)

const createCode = `-- name: CreateCode :one
INSERT INTO codes (code, version, school, subject, course, goal_group, grade, goal, detail, status, text)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING id, code, version, school, subject, course, goal_group, grade, goal, detail, status, text
`

type CreateCodeParams struct {
	Code      string
	Version   string
	School    string
	Subject   string
	Course    string
	GoalGroup string
	Grade     string
	Goal      string
	Detail    string
	Status    string
	Text      string
}

func (q *Queries) CreateCode(ctx context.Context, arg CreateCodeParams) (Code, error) {
	row := q.db.QueryRowContext(ctx, createCode,
		arg.Code,
		arg.Version,
		arg.School,
		arg.Subject,
		arg.Course,
		arg.GoalGroup,
		arg.Grade,
		arg.Goal,
		arg.Detail,
		arg.Status,
		arg.Text,
	)
	var i Code
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Version,
		&i.School,
		&i.Subject,
		&i.Course,
		&i.GoalGroup,
		&i.Grade,
		&i.Goal,
		&i.Detail,
		&i.Status,
		&i.Text,
	)
	return i, err
}

const deleteCode = `-- name: DeleteCode :one
DELETE FROM codes
WHERE id = $1
RETURNING id, code, version, school, subject, course, goal_group, grade, goal, detail, status, text
`

func (q *Queries) DeleteCode(ctx context.Context, id int64) (Code, error) {
	row := q.db.QueryRowContext(ctx, deleteCode, id)
	var i Code
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Version,
		&i.School,
		&i.Subject,
		&i.Course,
		&i.GoalGroup,
		&i.Grade,
		&i.Goal,
		&i.Detail,
		&i.Status,
		&i.Text,
	)
	return i, err
}

const getCode = `-- name: GetCode :one
SELECT id, code, version, school, subject, course, goal_group, grade, goal, detail, status, text FROM codes
WHERE code = $1
`

func (q *Queries) GetCode(ctx context.Context, code string) (Code, error) {
	row := q.db.QueryRowContext(ctx, getCode, code)
	var i Code
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Version,
		&i.School,
		&i.Subject,
		&i.Course,
		&i.GoalGroup,
		&i.Grade,
		&i.Goal,
		&i.Detail,
		&i.Status,
		&i.Text,
	)
	return i, err
}

const listCode = `-- name: ListCode :many
SELECT id, code, version, school, subject, course, goal_group, grade, goal, detail, status, text FROM codes
ORDER BY code
`

func (q *Queries) ListCode(ctx context.Context) ([]Code, error) {
	rows, err := q.db.QueryContext(ctx, listCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Code
	for rows.Next() {
		var i Code
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Version,
			&i.School,
			&i.Subject,
			&i.Course,
			&i.GoalGroup,
			&i.Grade,
			&i.Goal,
			&i.Detail,
			&i.Status,
			&i.Text,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCode = `-- name: UpdateCode :one
UPDATE codes
SET code = $2, version = $3, school = $4, subject = $5, course = $6, goal_group = $7, grade = $8, goal = $9, detail = $10, status = $11, text = $12
WHERE id = $1
RETURNING id, code, version, school, subject, course, goal_group, grade, goal, detail, status, text
`

type UpdateCodeParams struct {
	ID        int64
	Code      string
	Version   string
	School    string
	Subject   string
	Course    string
	GoalGroup string
	Grade     string
	Goal      string
	Detail    string
	Status    string
	Text      string
}

func (q *Queries) UpdateCode(ctx context.Context, arg UpdateCodeParams) (Code, error) {
	row := q.db.QueryRowContext(ctx, updateCode,
		arg.ID,
		arg.Code,
		arg.Version,
		arg.School,
		arg.Subject,
		arg.Course,
		arg.GoalGroup,
		arg.Grade,
		arg.Goal,
		arg.Detail,
		arg.Status,
		arg.Text,
	)
	var i Code
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Version,
		&i.School,
		&i.Subject,
		&i.Course,
		&i.GoalGroup,
		&i.Grade,
		&i.Goal,
		&i.Detail,
		&i.Status,
		&i.Text,
	)
	return i, err
}
